"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  BarChart3,
  TrendingUp,
  DollarSign,
  Users,
  Calendar,
  MessageSquare,
  BookOpen,
  Target,
  Bell,
  Settings,
  ArrowUpRight,
  ArrowDownRight,
  Activity,
  Clock,
  CheckCircle,
  AlertTriangle,
  Briefcase,
  Bot,
  Sparkles,
} from "lucide-react";

// Import the new AI dashboard components
import FinancialAnalysis from "./financial-analysis";
import BusinessConsultation from "./business-consultation";

const mockData = {
  metrics: [
    {
      title: "Total Revenue",
      value: "Rp 125,430,000",
      change: "+12.5%",
      trend: "up",
      icon: DollarSign,
    },
    {
      title: "Active Clients",
      value: "847",
      change: "+5.2%",
      trend: "up",
      icon: Users,
    },
    {
      title: "Avg. ROI",
      value: "23.8%",
      change: "+2.1%",
      trend: "up",
      icon: TrendingUp,
    },
    {
      title: "Risk Score",
      value: "Low",
      change: "-15%",
      trend: "down",
      icon: Target,
    },
  ],
  recentActivities: [
    {
      id: 1,
      type: "consultation",
      title: "AI Business Consultation",
      description: "Strategic recommendations generated by Fintar AI",
      time: "2 hours ago",
      status: "completed",
    },
    {
      id: 2,
      type: "analysis",
      title: "Financial Portfolio Analysis",
      description: "AI-powered risk assessment and optimization completed",
      time: "4 hours ago",
      status: "completed",
    },
    {
      id: 3,
      type: "booking",
      title: "New Appointment",
      description: "Client scheduled financial planning session",
      time: "6 hours ago",
      status: "pending",
    },
    {
      id: 4,
      type: "alert",
      title: "Market Intelligence Alert",
      description: "AI detected opportunity in emerging markets",
      time: "1 day ago",
      status: "warning",
    },
  ],
  upcomingTasks: [
    {
      id: 1,
      task: "Review AI-generated quarterly reports",
      deadline: "Today, 3:00 PM",
      priority: "high",
    },
    {
      id: 2,
      task: "AI consultation presentation prep",
      deadline: "Tomorrow, 10:00 AM",
      priority: "medium",
    },
    {
      id: 3,
      task: "Market AI research update",
      deadline: "Friday, 2:00 PM",
      priority: "low",
    },
  ],
  aiInsights: [
    {
      id: 1,
      title: "Portfolio Optimization Opportunity",
      description:
        "AI detected 15% potential improvement in portfolio allocation",
      confidence: "High",
      action: "Rebalance Portfolio",
      impact: "+15% ROI",
    },
    {
      id: 2,
      title: "Market Trend Alert",
      description: "Emerging opportunities in sustainable energy sector",
      confidence: "Medium",
      action: "Consider Investment",
      impact: "+8% Growth",
    },
    {
      id: 3,
      title: "Risk Mitigation",
      description: "Potential downside detected in tech stocks",
      confidence: "High",
      action: "Diversify Holdings",
      impact: "-12% Risk",
    },
  ],
};

type DashboardView =
  | "overview"
  | "financial-analysis"
  | "business-consultation";

const getStatusIcon = (status: string) => {
  switch (status) {
    case "completed":
      return <CheckCircle className="w-4 h-4 text-green-500" />;
    case "pending":
      return <Clock className="w-4 h-4 text-yellow-500" />;
    case "warning":
      return <AlertTriangle className="w-4 h-4 text-red-500" />;
    default:
      return <Activity className="w-4 h-4 text-blue-500" />;
  }
};

const getPriorityColor = (priority: string) => {
  switch (priority) {
    case "high":
      return "bg-red-500 text-white";
    case "medium":
      return "bg-yellow-500 text-black";
    case "low":
      return "bg-green-500 text-white";
    default:
      return "bg-gray-500 text-white";
  }
};

const getConfidenceColor = (confidence: string) => {
  switch (confidence.toLowerCase()) {
    case "high":
      return "text-green-400 bg-green-400/20 border-green-400/30";
    case "medium":
      return "text-yellow-400 bg-yellow-400/20 border-yellow-400/30";
    case "low":
      return "text-red-400 bg-red-400/20 border-red-400/30";
    default:
      return "text-gray-400 bg-gray-400/20 border-gray-400/30";
  }
};

export default function EnhancedDashboardOverview() {
  const [currentView, setCurrentView] = useState<DashboardView>("overview");
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  const handleQuickAction = (action: string) => {
    switch (action) {
      case "financial-analysis":
        setCurrentView("financial-analysis");
        break;
      case "business-consultation":
        setCurrentView("business-consultation");
        break;
      case "chat":
        // Navigate to chat (you might want to use a router here)
        window.location.href = "/chat";
        break;
      case "booking":
        window.location.href = "/booking";
        break;
      case "education":
        window.location.href = "/education";
        break;
      default:
        break;
    }
  };

  if (currentView === "financial-analysis") {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <Button
            variant="outline"
            onClick={() => setCurrentView("overview")}
            className="mb-4"
          >
            ← Back to Dashboard
          </Button>
        </div>
        <FinancialAnalysis />
      </div>
    );
  }

  if (currentView === "business-consultation") {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <Button
            variant="outline"
            onClick={() => setCurrentView("overview")}
            className="mb-4"
          >
            ← Back to Dashboard
          </Button>
        </div>
        <BusinessConsultation />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Enhanced Header with Real-time Clock */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0">
        <div>
          <h1 className="text-3xl font-bold text-font-light flex items-center space-x-3">
            <span>Fintar Financial Dashboard</span>
            <Bot className="w-8 h-8 text-primary-400" />
          </h1>
          <p className="text-font-secondary">
            AI-Powered Financial Management •{" "}
            {currentTime.toLocaleString("id-ID")}
          </p>
        </div>
        <div className="flex space-x-3">
          <Button variant="outline" size="sm">
            <Calendar className="w-4 h-4 mr-2" />
            This Month
          </Button>
          <Button size="sm">
            <Settings className="w-4 h-4 mr-2" />
            Settings
          </Button>
        </div>
      </div>

      {/* Enhanced Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {mockData.metrics.map((metric, index) => {
          const Icon = metric.icon;
          const TrendIcon =
            metric.trend === "up" ? ArrowUpRight : ArrowDownRight;

          return (
            <Card
              key={index}
              className="glass-effect border-primary-light/20 hover:border-primary-light/40 transition-all duration-300"
            >
              <CardContent className="p-6">
                <div className="flex items-center justify-between space-y-0">
                  <div className="flex items-center space-x-2">
                    <Icon className="w-4 h-4 text-primary-400" />
                    <p className="text-sm font-medium text-font-secondary">
                      {metric.title}
                    </p>
                  </div>
                  <div
                    className={`flex items-center space-x-1 text-xs ${
                      metric.trend === "up" ? "text-green-500" : "text-red-500"
                    }`}
                  >
                    <TrendIcon className="w-3 h-3" />
                    <span>{metric.change}</span>
                  </div>
                </div>
                <div className="mt-3">
                  <p className="text-2xl font-bold text-font-light">
                    {metric.value}
                  </p>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Enhanced Quick Actions */}
      <Card className="glass-effect border-primary-light/20">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Sparkles className="w-5 h-5 text-primary-400" />
            <span>AI-Powered Quick Actions</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <Button
              variant="outline"
              className="h-auto py-4 flex flex-col space-y-2 hover:border-primary-400 hover:bg-primary-dark/5"
              onClick={() => handleQuickAction("financial-analysis")}
            >
              <BarChart3 className="w-6 h-6 text-primary-400" />
              <span className="text-sm">AI Financial Analysis</span>
            </Button>
            <Button
              variant="outline"
              className="h-auto py-4 flex flex-col space-y-2 hover:border-teal-400 hover:bg-teal-dark/5"
              onClick={() => handleQuickAction("business-consultation")}
            >
              <Briefcase className="w-6 h-6 text-teal-400" />
              <span className="text-sm">Business Consultation</span>
            </Button>
            <Button
              variant="outline"
              className="h-auto py-4 flex flex-col space-y-2 hover:border-green-400 hover:bg-green-dark/5"
              onClick={() => handleQuickAction("chat")}
            >
              <MessageSquare className="w-6 h-6 text-green-400" />
              <span className="text-sm">AI Assistant Chat</span>
            </Button>
            <Button
              variant="outline"
              className="h-auto py-4 flex flex-col space-y-2 hover:border-purple-400 hover:bg-purple-dark/5"
              onClick={() => handleQuickAction("booking")}
            >
              <Calendar className="w-6 h-6 text-purple-400" />
              <span className="text-sm">Book AI Session</span>
            </Button>
            <Button
              variant="outline"
              className="h-auto py-4 flex flex-col space-y-2 hover:border-orange-400 hover:bg-orange-dark/5"
              onClick={() => handleQuickAction("education")}
            >
              <BookOpen className="w-6 h-6 text-orange-400" />
              <span className="text-sm">AI Learning</span>
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* AI Insights Section */}
      <Card className="glass-effect border-primary-light/20">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Bot className="w-5 h-5 text-primary-400" />
            <span>Fintar AI Insights & Recommendations</span>
            <Badge variant="secondary" className="ml-2 text-xs">
              Smart Analytics
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {mockData.aiInsights.map((insight) => (
              <div
                key={insight.id}
                className="p-4 border border-primary-light/20 rounded-lg bg-primary-dark/5 hover:bg-primary-dark/10 transition-all duration-300"
              >
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-semibold text-font-light text-sm">
                    {insight.title}
                  </h4>
                  <Badge
                    className={`text-xs ${getConfidenceColor(insight.confidence)} border-0`}
                  >
                    {insight.confidence}
                  </Badge>
                </div>

                <p className="text-xs text-font-secondary mb-3 leading-relaxed">
                  {insight.description}
                </p>

                <div className="flex items-center justify-between">
                  <div className="text-xs">
                    <span className="text-font-secondary">Impact: </span>
                    <span
                      className={`font-medium ${
                        insight.impact.startsWith("+")
                          ? "text-green-400"
                          : insight.impact.startsWith("-") &&
                              insight.impact.includes("Risk")
                            ? "text-green-400"
                            : "text-red-400"
                      }`}
                    >
                      {insight.impact}
                    </span>
                  </div>
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-xs py-1 px-2"
                  >
                    {insight.action}
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Enhanced Recent Activities */}
        <Card className="glass-effect border-primary-light/20">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>Recent AI Activities</span>
              <Button variant="ghost" size="sm">
                View All
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {mockData.recentActivities.map((activity) => (
                <div
                  key={activity.id}
                  className="flex items-start space-x-3 p-3 rounded-lg bg-bg-darker/50 hover:bg-bg-darker/70 transition-all duration-300"
                >
                  <div className="mt-1">{getStatusIcon(activity.status)}</div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-font-light">
                      {activity.title}
                    </p>
                    <p className="text-xs text-font-secondary">
                      {activity.description}
                    </p>
                    <p className="text-xs text-font-secondary mt-1">
                      {activity.time}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Enhanced Upcoming Tasks */}
        <Card className="glass-effect border-primary-light/20">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>AI-Suggested Tasks</span>
              <Button variant="ghost" size="sm">
                <Bell className="w-4 h-4" />
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {mockData.upcomingTasks.map((task) => (
                <div
                  key={task.id}
                  className="flex items-center justify-between p-3 rounded-lg bg-bg-darker/50 hover:bg-bg-darker/70 transition-all duration-300"
                >
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-font-light">
                      {task.task}
                    </p>
                    <p className="text-xs text-font-secondary">
                      {task.deadline}
                    </p>
                  </div>
                  <Badge
                    className={`${getPriorityColor(task.priority)} text-xs`}
                  >
                    {task.priority}
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
